import cachetools
import functools
import math
import threading
import time
import traceback

import pendulum
import telebot

import cfg
import my_cohere
import my_db
import my_gemini_general
import my_groq
import my_log
import my_mistral
import my_github


def get_subscription_status_string(chat_id_full: str, lang: str, telegram_stars: int, total_msgs: int, last_donate_time: float, cfg, my_db, tr, my_gemini_general, my_groq, my_mistral, my_cohere, my_github) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∑–≤—ë–∑–¥,
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –Ω–∞–ª–∏—á–∏—è API-–∫–ª—é—á–µ–π.
    """
    # 1. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    texts = {
        'telegram_stars': tr('Telegram stars:', lang, help='Telegram Stars is a new feature that allows users to buy and spend Stars, a new digital currency, on digital goods and services within the Telegram ecosystem, like ebooks, online courses, or items in Telegram games.'),
        'balance_label': tr('–ó–≤—ë–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ:', lang, help="A label for the user's star balance. Full example: '–ó–≤—ë–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: 150'. Please translate only the label part: '–ó–≤—ë–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ:'"),
        'sub_active': tr('–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞', lang, help="A status message indicating the user's subscription is active. Example: '‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞'. Please translate only the text: '–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞'"),
        'next_debit': tr('–°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ:', lang, help="A label for the date of the next automatic payment. Full example: '–°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: 07 –∞–≤–≥—É—Å—Ç–∞ 2025'. Please translate only the label part: '–°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ:'"),
        'balance_enough_until': tr('–¢–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Ö–≤–∞—Ç–∏—Ç –¥–æ:', lang, help="A label indicating the future date until which the user's current balance will last. Full example: '–¢–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Ö–≤–∞—Ç–∏—Ç –¥–æ: 07 —Å–µ–Ω—Ç—è–±—Ä—è 2025'. Please translate only the label part: '–¢–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Ö–≤–∞—Ç–∏—Ç –¥–æ:'"),
        'sub_expired': tr('–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞', lang, help="A status message indicating the user's subscription has expired. Example: '‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞'. Please translate only the text: '–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞'"),
        'last_payment': tr('–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç—ë–∂:', lang, help="A label for the date of the user's last payment. Full example: '–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç—ë–∂: 08 –∏—é–ª—è 2025'. Please translate only the label part: '–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç—ë–∂:'"),
        'payment_due_part1': tr('–°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç—ë–∂ –≤ —Ä–∞–∑–º–µ—Ä–µ', lang, help="This is the first part of a sentence. The full original sentence is: '–°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç—ë–∂ –≤ —Ä–∞–∑–º–µ—Ä–µ 50 üåü –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω –ø—Ä–∏ –≤–∞—à–µ–º —Å–ª–µ–¥—É—é—â–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–æ—Ç—É.' Please translate only the initial part: '–°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç—ë–∂ –≤ —Ä–∞–∑–º–µ—Ä–µ'"),
        'payment_due_part2': tr('–±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω –ø—Ä–∏ –≤–∞—à–µ–º —Å–ª–µ–¥—É—é—â–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–æ—Ç—É.', lang, help="This is the second part of a sentence. The full original sentence is: '–°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç—ë–∂ –≤ —Ä–∞–∑–º–µ—Ä–µ 50 üåü –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω –ø—Ä–∏ –≤–∞—à–µ–º —Å–ª–µ–¥—É—é—â–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–æ—Ç—É.' Please translate only the final part: '–±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω –ø—Ä–∏ –≤–∞—à–µ–º —Å–ª–µ–¥—É—é—â–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–æ—Ç—É.'"),
        'not_enough_to_renew': tr('–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è', lang, help="A short note in parentheses indicating the user's balance is too low to renew the subscription. Full example: '–ó–≤—ë–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: 20 (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è)'. Please translate only the part in parentheses: '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è'"),
        'sub_inactive_stars': tr('–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ –∑–≤—ë–∑–¥–∞–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞', lang, help="A status message indicating the subscription that uses 'Stars' currency is not active. Example: '‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ –∑–≤—ë–∑–¥–∞–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'. Please translate only the text: '–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ –∑–≤—ë–∑–¥–∞–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'"),
        'resume_with_stars_or_keys': tr('–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç –∑–≤—ë–∑–¥–∞–º–∏ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ API-–∫–ª—é—á–∏ (–∫–æ–º–∞–Ω–¥–∞ /keys).', lang, help="A call-to-action message for a user with an inactive subscription, explaining how to resume service. The text is a full sentence.")
    }

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    have_keys = (
        (chat_id_full in my_gemini_general.USER_KEYS) or
        (chat_id_full in my_groq.USER_KEYS) or
        (chat_id_full in my_mistral.USER_KEYS) or
        (chat_id_full in my_cohere.USER_KEYS) or
        (chat_id_full in my_github.USER_KEYS)
    )
    #DEBUG
    # have_keys = False

    MAX_TOTAL_MESSAGES = getattr(cfg, 'MAX_TOTAL_MESSAGES', 999999)
    DONATE_PRICE = getattr(cfg, 'DONATE_PRICE', 1)

    # 3. –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
    if total_msgs <= MAX_TOTAL_MESSAGES or have_keys:
        icon = 'üåü' if telegram_stars > 0 else '‚≠êÔ∏è'
        return f"{icon} {texts['telegram_stars']} {telegram_stars} /stars"

    SECONDS_IN_MONTH = 60 * 60 * 24 * 30
    stars_balance_str = f"üåü {texts['balance_label']} {telegram_stars}"
    is_active = (time.time() - last_donate_time) < SECONDS_IN_MONTH if last_donate_time else False

    if is_active:
        # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        affordable_renewals = max(0, math.floor(telegram_stars / DONATE_PRICE))
        current_expiry_date = pendulum.from_timestamp(last_donate_time).add(months=1)
        final_expiry_date = current_expiry_date.add(months=affordable_renewals)

        try:
            current_expiry_date_str = current_expiry_date.format('DD MMMM YYYY', locale=lang)
            final_expiry_date_str = final_expiry_date.format('DD MMMM YYYY', locale=lang)
        except Exception:
            current_expiry_date_str = current_expiry_date.format('DD MMMM YYYY', locale='en')
            final_expiry_date_str = final_expiry_date.format('DD MMMM YYYY', locale='en')

        return (
            f"{stars_balance_str}\n"
            f"‚úÖ {texts['sub_active']}\n"
            f"{texts['next_debit']} {current_expiry_date_str}\n"
            f"üí∞ {texts['balance_enough_until']} {final_expiry_date_str}"
        )
    else:
        # –°—Ü–µ–Ω–∞—Ä–∏–∏ 3 –∏ 4: –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
        if telegram_stars >= DONATE_PRICE:
            # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
            msg = f"{stars_balance_str}\n‚ö†Ô∏è {texts['sub_expired']}"
            if last_donate_time:
                try:
                    last_payment_str = pendulum.from_timestamp(last_donate_time).format('DD MMMM YYYY', locale=lang)
                except Exception:
                    last_payment_str = pendulum.from_timestamp(last_donate_time).format('DD MMMM YYYY', locale='en')
                msg += f"\n{texts['last_payment']} {last_payment_str}"

            # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π –∏ —á–∏—Å–ª–∞ >>>
            payment_due_msg = f"{texts['payment_due_part1']} {DONATE_PRICE} üåü {texts['payment_due_part2']}"
            msg += f"\n{payment_due_msg}"
            return msg
        else:
            # –°—Ü–µ–Ω–∞—Ä–∏–π 4: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥
            stars_balance_str += f" ({texts['not_enough_to_renew']})"
            msg = f"{stars_balance_str}\n‚ùå {texts['sub_inactive_stars']}"
            if last_donate_time:
                try:
                    last_payment_str = pendulum.from_timestamp(last_donate_time).format('DD MMMM YYYY', locale=lang)
                except Exception:
                    last_payment_str = pendulum.from_timestamp(last_donate_time).format('DD MMMM YYYY', locale='en')
                msg += f"\n{texts['last_payment']} {last_payment_str}"

            msg += f"\n{texts['resume_with_stars_or_keys']}"
            return msg


def cache_positive_by_user_id(maxsize: int = 1000, ttl: int = 10*60):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏.
    –ö–µ—à–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ (True) —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è chat_id_full –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞.
    """
    _cache = cachetools.TTLCache(maxsize=maxsize, ttl=ttl)
    _cache_lock = threading.Lock()

    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ chat_id_full –≤—Å–µ–≥–¥–∞ –≤—Ç–æ—Ä–æ–π –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
            # –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π
            user_id = kwargs.get('chat_id_full')
            if user_id is None and len(args) > 1:
                user_id = args[1]

            if user_id is None:
                # –ï—Å–ª–∏ user_id –Ω–µ –Ω–∞–π–¥–µ–Ω, –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                return func(*args, **kwargs)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            with _cache_lock:
                if user_id in _cache:
                    return _cache[user_id] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, —Ç–∞–∫ –∫–∞–∫ –∫–µ—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ

            # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            result = func(*args, **kwargs)

            # –ö–µ—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç True
            if result is True:
                with _cache_lock:
                    _cache[user_id] = True

            return result
        return wrapper
    return decorator


_GLOBAL_CHECK_DONATE_LOCKS_ACCESS_LOCK = threading.Lock()
@cache_positive_by_user_id(maxsize=1000, ttl=10*60)
def check_donate(
    message: telebot.types.Message,
    chat_id_full: str,
    lang: str,
    COMMAND_MODE,
    CHECK_DONATE_LOCKS,
    BOT_ID,
    tr,
    bot_reply,
    get_keyboard
) -> bool:
    '''
    –ï—Å–ª–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç —Ç–æ –Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
    –∏ –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω —Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.

    –ï—Å–ª–∏ —É —é–∑–µ—Ä–∞ –µ—Å—Ç—å –≤—Å–µ –∫–ª—é—á–∏, –∏ –µ—Å—Ç—å –∑–≤–µ–∑–¥—ã –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–æ
    –∑–≤–µ–∑–¥—ã –Ω–∞–¥–æ –ø–æ—Ç—Ä–µ–±–ª—è—Ç—å –≤—Å—ë —Ä–∞–≤–Ω–æ, —á—Ç–æ –±—ã –Ω–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–ª–∏—Å—å.
    '''
    try:
        SECONDS_IN_MONTH = 60 * 60 * 24 * 30
        # –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—É–º–º–∞ —Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        if chat_id_full in COMMAND_MODE and COMMAND_MODE[chat_id_full] == 'enter_start_amount':
            return True

        with _GLOBAL_CHECK_DONATE_LOCKS_ACCESS_LOCK:
            lock = CHECK_DONATE_LOCKS.setdefault(message.from_user.id, threading.Lock())

        with lock:
            try:
                chat_mode = my_db.get_user_property(chat_id_full, 'chat_mode')
                # –µ—Å–ª–∏ –∞–¥–º–∏–Ω –∏–ª–∏ —ç—Ç–æ –≤ –≥—Ä—É–ø–ø–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ —Ä–µ–∂–∏–º —á–∞—Ç–∞ = openrouter
                if message.from_user.id in cfg.admins or chat_id_full.startswith('[-') or message.from_user.id == BOT_ID or chat_mode == 'openrouter':
                    return True

                # –µ—Å–ª–∏ –∑–∞ —Å—É—Ç–∫–∏ –±—ã–ª–æ –º–µ–Ω—å—à–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
                # msgs24h = my_db.count_msgs_last_24h(chat_id_full)
                # max_per_day = cfg.MAX_FREE_PER_DAY if hasattr(cfg, 'MAX_FREE_PER_DAY') else 10
                # if msgs24h <= max_per_day:
                #     return True

                # —é–∑–µ—Ä—ã —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å 2 –∫–ª—é—á–∞ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥–ø–∏—Å–∫–∏,
                # –Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–≤–µ–∑–¥—ã —Ç–æ –∏—Ö –Ω–∞–¥–æ —Å–Ω–∏–º–∞—Ç—å —á—Ç–æ–± –Ω–µ –∫–æ–ø–∏–ª–∏—Å—å
                have_keys = 0
                if chat_id_full in my_gemini_general.USER_KEYS:
                    have_keys += 1
                if chat_id_full in my_groq.USER_KEYS:
                    have_keys += 1
                if chat_id_full in my_mistral.USER_KEYS:
                    have_keys += 1
                if chat_id_full in my_cohere.USER_KEYS:
                    have_keys += 1
                if chat_id_full in my_github.USER_KEYS:
                    have_keys += 1
                have_keys = have_keys > 1

                total_messages = my_db.count_msgs_total_user(chat_id_full)
                MAX_TOTAL_MESSAGES = cfg.MAX_TOTAL_MESSAGES if hasattr(cfg, 'MAX_TOTAL_MESSAGES') else 500000
                DONATE_PRICE = cfg.DONATE_PRICE if hasattr(cfg, 'DONATE_PRICE') else 50

                if total_messages > MAX_TOTAL_MESSAGES:
                    last_donate_time = my_db.get_user_property(chat_id_full, 'last_donate_time') or 0
                    if time.time() - last_donate_time > SECONDS_IN_MONTH:
                        stars = my_db.get_user_property(chat_id_full, 'telegram_stars') or 0
                        if stars >= DONATE_PRICE:
                            my_db.set_user_property(chat_id_full, 'last_donate_time', time.time())
                            my_db.set_user_property(chat_id_full, 'telegram_stars', stars - DONATE_PRICE)
                            my_log.log_donate_consumption(f'{chat_id_full} -{DONATE_PRICE} stars')
                            # msg = tr(f'You need {DONATE_PRICE} stars for a month of free access.', lang)

                            # msg = tr('You have enough stars for a month of free access. Thank you for your support!', lang)
                            # bot_reply(message, msg, disable_web_page_preview = True, reply_markup = get_keyboard('donate_stars', message))
                        else:
                            if have_keys:
                                pass
                            else:
                                msg = tr(f'You need {DONATE_PRICE} stars for a month of free access.', lang)
                                msg += '\n\n' + tr('You have not enough stars for a month of free access.\n\nYou can get free access if bring all free keys, see /keys command for instruction.', lang)
                                bot_reply(message, msg, disable_web_page_preview = True, reply_markup = get_keyboard('donate_stars', message))
                                # my_log.log_donate_consumption_fail(f'{chat_id_full} user have not enough stars {stars}')
                                return False
            except Exception as unexpected_error:
                error_traceback = traceback.format_exc()
                my_log.log2(f'tb:check_donate: {chat_id_full}\n\n{unexpected_error}\n\n{error_traceback}')

    except Exception as unknown:
        traceback_error = traceback.format_exc()
        my_log.log2(f'tb:check_donate: {unknown}\n{traceback_error}')

    return True


def github_models(user_id: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ—á—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –∫–ª—é—á –æ—Ç –≥–∏—Ç—Ö–∞–±–∞.

    1. –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ª–∏—á–Ω—ã–π API-–∫–ª—é—á –æ—Ç GitHub.
    –∏–ª–∏
    2. –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (—á–µ—Ä–µ–∑ Telegram Stars).

    –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–ø–æ –ª–∏–º–∏—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–π) –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ "—Ä–∞–±–æ—á–∞—è –ø–æ–¥–ø–∏—Å–∫–∞".

    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –∏–Ω–∞—á–µ False.
    """
    SECONDS_IN_MONTH = 60 * 60 * 24 * 30

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ GitHub API –∫–ª—é—á–∞
    has_github_key = (user_id in my_github.USER_KEYS)
    if has_github_key:
        return True

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–ª–∞—á–µ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É (—á–µ—Ä–µ–∑ Telegram Stars)
    # –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –±–æ–ª—å—à–µ –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è "—Ä–∞–±–æ—á–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π".

    last_donate_time = my_db.get_user_property(user_id, 'last_donate_time') or 0
    stars = my_db.get_user_property(user_id, 'telegram_stars') or 0
    DONATE_PRICE = getattr(cfg, 'DONATE_PRICE', 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –º–µ—Å—è—Ü —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞)
    if (time.time() - last_donate_time) < SECONDS_IN_MONTH:
        return True # –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏

    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∑–≤–µ–∑–¥ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
    if stars >= DONATE_PRICE:
        # –ï—Å–ª–∏ –∑–≤–µ–∑–¥ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ "—Ä–∞–±–æ—á–∞—è",
        # —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –µ—ë –ø—Ä–æ–¥–ª–∏—Ç—å.
        return True
    else:
        # –ù–µ—Ç GitHub –∫–ª—é—á–∞, –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –∏ –∑–≤–µ–∑–¥ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.
        return False
